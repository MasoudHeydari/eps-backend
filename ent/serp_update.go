// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/karust/openserp/ent/predicate"
	"github.com/karust/openserp/ent/searchquery"
	"github.com/karust/openserp/ent/serp"
)

// SERPUpdate is the builder for updating SERP entities.
type SERPUpdate struct {
	config
	hooks    []Hook
	mutation *SERPMutation
}

// Where appends a list predicates to the SERPUpdate builder.
func (su *SERPUpdate) Where(ps ...predicate.SERP) *SERPUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetURL sets the "url" field.
func (su *SERPUpdate) SetURL(s string) *SERPUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (su *SERPUpdate) SetNillableURL(s *string) *SERPUpdate {
	if s != nil {
		su.SetURL(*s)
	}
	return su
}

// SetTitle sets the "title" field.
func (su *SERPUpdate) SetTitle(s string) *SERPUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *SERPUpdate) SetNillableTitle(s *string) *SERPUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *SERPUpdate) SetDescription(s string) *SERPUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SERPUpdate) SetNillableDescription(s *string) *SERPUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// SetPhones sets the "phones" field.
func (su *SERPUpdate) SetPhones(s []string) *SERPUpdate {
	su.mutation.SetPhones(s)
	return su
}

// AppendPhones appends s to the "phones" field.
func (su *SERPUpdate) AppendPhones(s []string) *SERPUpdate {
	su.mutation.AppendPhones(s)
	return su
}

// ClearPhones clears the value of the "phones" field.
func (su *SERPUpdate) ClearPhones() *SERPUpdate {
	su.mutation.ClearPhones()
	return su
}

// SetEmails sets the "emails" field.
func (su *SERPUpdate) SetEmails(s []string) *SERPUpdate {
	su.mutation.SetEmails(s)
	return su
}

// AppendEmails appends s to the "emails" field.
func (su *SERPUpdate) AppendEmails(s []string) *SERPUpdate {
	su.mutation.AppendEmails(s)
	return su
}

// ClearEmails clears the value of the "emails" field.
func (su *SERPUpdate) ClearEmails() *SERPUpdate {
	su.mutation.ClearEmails()
	return su
}

// SetKeyWords sets the "key_words" field.
func (su *SERPUpdate) SetKeyWords(s []string) *SERPUpdate {
	su.mutation.SetKeyWords(s)
	return su
}

// AppendKeyWords appends s to the "key_words" field.
func (su *SERPUpdate) AppendKeyWords(s []string) *SERPUpdate {
	su.mutation.AppendKeyWords(s)
	return su
}

// SetIsRead sets the "is_read" field.
func (su *SERPUpdate) SetIsRead(b bool) *SERPUpdate {
	su.mutation.SetIsRead(b)
	return su
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (su *SERPUpdate) SetNillableIsRead(b *bool) *SERPUpdate {
	if b != nil {
		su.SetIsRead(*b)
	}
	return su
}

// SetSqID sets the "sq_id" field.
func (su *SERPUpdate) SetSqID(i int) *SERPUpdate {
	su.mutation.SetSqID(i)
	return su
}

// SetNillableSqID sets the "sq_id" field if the given value is not nil.
func (su *SERPUpdate) SetNillableSqID(i *int) *SERPUpdate {
	if i != nil {
		su.SetSqID(*i)
	}
	return su
}

// ClearSqID clears the value of the "sq_id" field.
func (su *SERPUpdate) ClearSqID() *SERPUpdate {
	su.mutation.ClearSqID()
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SERPUpdate) SetCreatedAt(t time.Time) *SERPUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SERPUpdate) SetNillableCreatedAt(t *time.Time) *SERPUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetSearchQueryID sets the "search_query" edge to the SearchQuery entity by ID.
func (su *SERPUpdate) SetSearchQueryID(id int) *SERPUpdate {
	su.mutation.SetSearchQueryID(id)
	return su
}

// SetNillableSearchQueryID sets the "search_query" edge to the SearchQuery entity by ID if the given value is not nil.
func (su *SERPUpdate) SetNillableSearchQueryID(id *int) *SERPUpdate {
	if id != nil {
		su = su.SetSearchQueryID(*id)
	}
	return su
}

// SetSearchQuery sets the "search_query" edge to the SearchQuery entity.
func (su *SERPUpdate) SetSearchQuery(s *SearchQuery) *SERPUpdate {
	return su.SetSearchQueryID(s.ID)
}

// Mutation returns the SERPMutation object of the builder.
func (su *SERPUpdate) Mutation() *SERPMutation {
	return su.mutation
}

// ClearSearchQuery clears the "search_query" edge to the SearchQuery entity.
func (su *SERPUpdate) ClearSearchQuery() *SERPUpdate {
	su.mutation.ClearSearchQuery()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SERPUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SERPUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SERPUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SERPUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SERPUpdate) check() error {
	if v, ok := su.mutation.URL(); ok {
		if err := serp.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "SERP.url": %w`, err)}
		}
	}
	if v, ok := su.mutation.Title(); ok {
		if err := serp.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "SERP.title": %w`, err)}
		}
	}
	return nil
}

func (su *SERPUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serp.Table, serp.Columns, sqlgraph.NewFieldSpec(serp.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.SetField(serp.FieldURL, field.TypeString, value)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(serp.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(serp.FieldDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.Phones(); ok {
		_spec.SetField(serp.FieldPhones, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedPhones(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serp.FieldPhones, value)
		})
	}
	if su.mutation.PhonesCleared() {
		_spec.ClearField(serp.FieldPhones, field.TypeJSON)
	}
	if value, ok := su.mutation.Emails(); ok {
		_spec.SetField(serp.FieldEmails, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedEmails(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serp.FieldEmails, value)
		})
	}
	if su.mutation.EmailsCleared() {
		_spec.ClearField(serp.FieldEmails, field.TypeJSON)
	}
	if value, ok := su.mutation.KeyWords(); ok {
		_spec.SetField(serp.FieldKeyWords, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedKeyWords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serp.FieldKeyWords, value)
		})
	}
	if value, ok := su.mutation.IsRead(); ok {
		_spec.SetField(serp.FieldIsRead, field.TypeBool, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(serp.FieldCreatedAt, field.TypeTime, value)
	}
	if su.mutation.SearchQueryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serp.SearchQueryTable,
			Columns: []string{serp.SearchQueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(searchquery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SearchQueryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serp.SearchQueryTable,
			Columns: []string{serp.SearchQueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(searchquery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SERPUpdateOne is the builder for updating a single SERP entity.
type SERPUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SERPMutation
}

// SetURL sets the "url" field.
func (suo *SERPUpdateOne) SetURL(s string) *SERPUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (suo *SERPUpdateOne) SetNillableURL(s *string) *SERPUpdateOne {
	if s != nil {
		suo.SetURL(*s)
	}
	return suo
}

// SetTitle sets the "title" field.
func (suo *SERPUpdateOne) SetTitle(s string) *SERPUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *SERPUpdateOne) SetNillableTitle(s *string) *SERPUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *SERPUpdateOne) SetDescription(s string) *SERPUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SERPUpdateOne) SetNillableDescription(s *string) *SERPUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// SetPhones sets the "phones" field.
func (suo *SERPUpdateOne) SetPhones(s []string) *SERPUpdateOne {
	suo.mutation.SetPhones(s)
	return suo
}

// AppendPhones appends s to the "phones" field.
func (suo *SERPUpdateOne) AppendPhones(s []string) *SERPUpdateOne {
	suo.mutation.AppendPhones(s)
	return suo
}

// ClearPhones clears the value of the "phones" field.
func (suo *SERPUpdateOne) ClearPhones() *SERPUpdateOne {
	suo.mutation.ClearPhones()
	return suo
}

// SetEmails sets the "emails" field.
func (suo *SERPUpdateOne) SetEmails(s []string) *SERPUpdateOne {
	suo.mutation.SetEmails(s)
	return suo
}

// AppendEmails appends s to the "emails" field.
func (suo *SERPUpdateOne) AppendEmails(s []string) *SERPUpdateOne {
	suo.mutation.AppendEmails(s)
	return suo
}

// ClearEmails clears the value of the "emails" field.
func (suo *SERPUpdateOne) ClearEmails() *SERPUpdateOne {
	suo.mutation.ClearEmails()
	return suo
}

// SetKeyWords sets the "key_words" field.
func (suo *SERPUpdateOne) SetKeyWords(s []string) *SERPUpdateOne {
	suo.mutation.SetKeyWords(s)
	return suo
}

// AppendKeyWords appends s to the "key_words" field.
func (suo *SERPUpdateOne) AppendKeyWords(s []string) *SERPUpdateOne {
	suo.mutation.AppendKeyWords(s)
	return suo
}

// SetIsRead sets the "is_read" field.
func (suo *SERPUpdateOne) SetIsRead(b bool) *SERPUpdateOne {
	suo.mutation.SetIsRead(b)
	return suo
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (suo *SERPUpdateOne) SetNillableIsRead(b *bool) *SERPUpdateOne {
	if b != nil {
		suo.SetIsRead(*b)
	}
	return suo
}

// SetSqID sets the "sq_id" field.
func (suo *SERPUpdateOne) SetSqID(i int) *SERPUpdateOne {
	suo.mutation.SetSqID(i)
	return suo
}

// SetNillableSqID sets the "sq_id" field if the given value is not nil.
func (suo *SERPUpdateOne) SetNillableSqID(i *int) *SERPUpdateOne {
	if i != nil {
		suo.SetSqID(*i)
	}
	return suo
}

// ClearSqID clears the value of the "sq_id" field.
func (suo *SERPUpdateOne) ClearSqID() *SERPUpdateOne {
	suo.mutation.ClearSqID()
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SERPUpdateOne) SetCreatedAt(t time.Time) *SERPUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SERPUpdateOne) SetNillableCreatedAt(t *time.Time) *SERPUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetSearchQueryID sets the "search_query" edge to the SearchQuery entity by ID.
func (suo *SERPUpdateOne) SetSearchQueryID(id int) *SERPUpdateOne {
	suo.mutation.SetSearchQueryID(id)
	return suo
}

// SetNillableSearchQueryID sets the "search_query" edge to the SearchQuery entity by ID if the given value is not nil.
func (suo *SERPUpdateOne) SetNillableSearchQueryID(id *int) *SERPUpdateOne {
	if id != nil {
		suo = suo.SetSearchQueryID(*id)
	}
	return suo
}

// SetSearchQuery sets the "search_query" edge to the SearchQuery entity.
func (suo *SERPUpdateOne) SetSearchQuery(s *SearchQuery) *SERPUpdateOne {
	return suo.SetSearchQueryID(s.ID)
}

// Mutation returns the SERPMutation object of the builder.
func (suo *SERPUpdateOne) Mutation() *SERPMutation {
	return suo.mutation
}

// ClearSearchQuery clears the "search_query" edge to the SearchQuery entity.
func (suo *SERPUpdateOne) ClearSearchQuery() *SERPUpdateOne {
	suo.mutation.ClearSearchQuery()
	return suo
}

// Where appends a list predicates to the SERPUpdate builder.
func (suo *SERPUpdateOne) Where(ps ...predicate.SERP) *SERPUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SERPUpdateOne) Select(field string, fields ...string) *SERPUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated SERP entity.
func (suo *SERPUpdateOne) Save(ctx context.Context) (*SERP, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SERPUpdateOne) SaveX(ctx context.Context) *SERP {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SERPUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SERPUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SERPUpdateOne) check() error {
	if v, ok := suo.mutation.URL(); ok {
		if err := serp.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "SERP.url": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Title(); ok {
		if err := serp.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "SERP.title": %w`, err)}
		}
	}
	return nil
}

func (suo *SERPUpdateOne) sqlSave(ctx context.Context) (_node *SERP, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serp.Table, serp.Columns, sqlgraph.NewFieldSpec(serp.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SERP.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serp.FieldID)
		for _, f := range fields {
			if !serp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.SetField(serp.FieldURL, field.TypeString, value)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(serp.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(serp.FieldDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.Phones(); ok {
		_spec.SetField(serp.FieldPhones, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedPhones(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serp.FieldPhones, value)
		})
	}
	if suo.mutation.PhonesCleared() {
		_spec.ClearField(serp.FieldPhones, field.TypeJSON)
	}
	if value, ok := suo.mutation.Emails(); ok {
		_spec.SetField(serp.FieldEmails, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedEmails(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serp.FieldEmails, value)
		})
	}
	if suo.mutation.EmailsCleared() {
		_spec.ClearField(serp.FieldEmails, field.TypeJSON)
	}
	if value, ok := suo.mutation.KeyWords(); ok {
		_spec.SetField(serp.FieldKeyWords, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedKeyWords(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serp.FieldKeyWords, value)
		})
	}
	if value, ok := suo.mutation.IsRead(); ok {
		_spec.SetField(serp.FieldIsRead, field.TypeBool, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(serp.FieldCreatedAt, field.TypeTime, value)
	}
	if suo.mutation.SearchQueryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serp.SearchQueryTable,
			Columns: []string{serp.SearchQueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(searchquery.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SearchQueryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serp.SearchQueryTable,
			Columns: []string{serp.SearchQueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(searchquery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SERP{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
