// Code generated by ent, DO NOT EDIT.

package searchquery

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the searchquery type in the database.
	Label = "search_query"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuery holds the string denoting the query field in the database.
	FieldQuery = "query"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldIsCanceled holds the string denoting the is_canceled field in the database.
	FieldIsCanceled = "is_canceled"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeSerps holds the string denoting the serps edge name in mutations.
	EdgeSerps = "serps"
	// Table holds the table name of the searchquery in the database.
	Table = "search_queries"
	// SerpsTable is the table that holds the serps relation/edge.
	SerpsTable = "serps"
	// SerpsInverseTable is the table name for the SERP entity.
	// It exists in this package in order to avoid circular dependency with the "serp" package.
	SerpsInverseTable = "serps"
	// SerpsColumn is the table column denoting the serps relation/edge.
	SerpsColumn = "sq_id"
)

// Columns holds all SQL columns for searchquery fields.
var Columns = []string{
	FieldID,
	FieldQuery,
	FieldLocation,
	FieldLanguage,
	FieldIsCanceled,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// QueryValidator is a validator for the "query" field. It is called by the builders before save.
	QueryValidator func(string) error
	// DefaultIsCanceled holds the default value on creation for the "is_canceled" field.
	DefaultIsCanceled bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the SearchQuery queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQuery orders the results by the query field.
func ByQuery(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuery, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByIsCanceled orders the results by the is_canceled field.
func ByIsCanceled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCanceled, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySerpsCount orders the results by serps count.
func BySerpsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSerpsStep(), opts...)
	}
}

// BySerps orders the results by serps terms.
func BySerps(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSerpsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSerpsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SerpsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SerpsTable, SerpsColumn),
	)
}
