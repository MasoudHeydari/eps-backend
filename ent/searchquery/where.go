// Code generated by ent, DO NOT EDIT.

package searchquery

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/karust/openserp/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldLTE(FieldID, id))
}

// Query applies equality check predicate on the "query" field. It's identical to QueryEQ.
func Query(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEQ(FieldQuery, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEQ(FieldLocation, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEQ(FieldLanguage, v))
}

// IsCanceled applies equality check predicate on the "is_canceled" field. It's identical to IsCanceledEQ.
func IsCanceled(v bool) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEQ(FieldIsCanceled, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEQ(FieldCreatedAt, v))
}

// QueryEQ applies the EQ predicate on the "query" field.
func QueryEQ(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEQ(FieldQuery, v))
}

// QueryNEQ applies the NEQ predicate on the "query" field.
func QueryNEQ(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldNEQ(FieldQuery, v))
}

// QueryIn applies the In predicate on the "query" field.
func QueryIn(vs ...string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldIn(FieldQuery, vs...))
}

// QueryNotIn applies the NotIn predicate on the "query" field.
func QueryNotIn(vs ...string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldNotIn(FieldQuery, vs...))
}

// QueryGT applies the GT predicate on the "query" field.
func QueryGT(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldGT(FieldQuery, v))
}

// QueryGTE applies the GTE predicate on the "query" field.
func QueryGTE(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldGTE(FieldQuery, v))
}

// QueryLT applies the LT predicate on the "query" field.
func QueryLT(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldLT(FieldQuery, v))
}

// QueryLTE applies the LTE predicate on the "query" field.
func QueryLTE(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldLTE(FieldQuery, v))
}

// QueryContains applies the Contains predicate on the "query" field.
func QueryContains(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldContains(FieldQuery, v))
}

// QueryHasPrefix applies the HasPrefix predicate on the "query" field.
func QueryHasPrefix(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldHasPrefix(FieldQuery, v))
}

// QueryHasSuffix applies the HasSuffix predicate on the "query" field.
func QueryHasSuffix(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldHasSuffix(FieldQuery, v))
}

// QueryEqualFold applies the EqualFold predicate on the "query" field.
func QueryEqualFold(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEqualFold(FieldQuery, v))
}

// QueryContainsFold applies the ContainsFold predicate on the "query" field.
func QueryContainsFold(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldContainsFold(FieldQuery, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldContainsFold(FieldLocation, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldContainsFold(FieldLanguage, v))
}

// IsCanceledEQ applies the EQ predicate on the "is_canceled" field.
func IsCanceledEQ(v bool) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEQ(FieldIsCanceled, v))
}

// IsCanceledNEQ applies the NEQ predicate on the "is_canceled" field.
func IsCanceledNEQ(v bool) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldNEQ(FieldIsCanceled, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SearchQuery {
	return predicate.SearchQuery(sql.FieldLTE(FieldCreatedAt, v))
}

// HasSerps applies the HasEdge predicate on the "serps" edge.
func HasSerps() predicate.SearchQuery {
	return predicate.SearchQuery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SerpsTable, SerpsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSerpsWith applies the HasEdge predicate on the "serps" edge with a given conditions (other predicates).
func HasSerpsWith(preds ...predicate.SERP) predicate.SearchQuery {
	return predicate.SearchQuery(func(s *sql.Selector) {
		step := newSerpsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SearchQuery) predicate.SearchQuery {
	return predicate.SearchQuery(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SearchQuery) predicate.SearchQuery {
	return predicate.SearchQuery(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SearchQuery) predicate.SearchQuery {
	return predicate.SearchQuery(sql.NotPredicates(p))
}
