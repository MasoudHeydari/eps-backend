// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/karust/openserp/ent/searchquery"
	"github.com/karust/openserp/ent/serp"
)

// SERPCreate is the builder for creating a SERP entity.
type SERPCreate struct {
	config
	mutation *SERPMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetURL sets the "url" field.
func (sc *SERPCreate) SetURL(s string) *SERPCreate {
	sc.mutation.SetURL(s)
	return sc
}

// SetTitle sets the "title" field.
func (sc *SERPCreate) SetTitle(s string) *SERPCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *SERPCreate) SetDescription(s string) *SERPCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetPhones sets the "phones" field.
func (sc *SERPCreate) SetPhones(s []string) *SERPCreate {
	sc.mutation.SetPhones(s)
	return sc
}

// SetEmails sets the "emails" field.
func (sc *SERPCreate) SetEmails(s []string) *SERPCreate {
	sc.mutation.SetEmails(s)
	return sc
}

// SetKeyWords sets the "key_words" field.
func (sc *SERPCreate) SetKeyWords(s []string) *SERPCreate {
	sc.mutation.SetKeyWords(s)
	return sc
}

// SetIsRead sets the "is_read" field.
func (sc *SERPCreate) SetIsRead(b bool) *SERPCreate {
	sc.mutation.SetIsRead(b)
	return sc
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (sc *SERPCreate) SetNillableIsRead(b *bool) *SERPCreate {
	if b != nil {
		sc.SetIsRead(*b)
	}
	return sc
}

// SetSqID sets the "sq_id" field.
func (sc *SERPCreate) SetSqID(i int) *SERPCreate {
	sc.mutation.SetSqID(i)
	return sc
}

// SetNillableSqID sets the "sq_id" field if the given value is not nil.
func (sc *SERPCreate) SetNillableSqID(i *int) *SERPCreate {
	if i != nil {
		sc.SetSqID(*i)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SERPCreate) SetCreatedAt(t time.Time) *SERPCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SERPCreate) SetNillableCreatedAt(t *time.Time) *SERPCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetSearchQueryID sets the "search_query" edge to the SearchQuery entity by ID.
func (sc *SERPCreate) SetSearchQueryID(id int) *SERPCreate {
	sc.mutation.SetSearchQueryID(id)
	return sc
}

// SetNillableSearchQueryID sets the "search_query" edge to the SearchQuery entity by ID if the given value is not nil.
func (sc *SERPCreate) SetNillableSearchQueryID(id *int) *SERPCreate {
	if id != nil {
		sc = sc.SetSearchQueryID(*id)
	}
	return sc
}

// SetSearchQuery sets the "search_query" edge to the SearchQuery entity.
func (sc *SERPCreate) SetSearchQuery(s *SearchQuery) *SERPCreate {
	return sc.SetSearchQueryID(s.ID)
}

// Mutation returns the SERPMutation object of the builder.
func (sc *SERPCreate) Mutation() *SERPMutation {
	return sc.mutation
}

// Save creates the SERP in the database.
func (sc *SERPCreate) Save(ctx context.Context) (*SERP, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SERPCreate) SaveX(ctx context.Context) *SERP {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SERPCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SERPCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SERPCreate) defaults() {
	if _, ok := sc.mutation.IsRead(); !ok {
		v := serp.DefaultIsRead
		sc.mutation.SetIsRead(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := serp.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SERPCreate) check() error {
	if _, ok := sc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "SERP.url"`)}
	}
	if v, ok := sc.mutation.URL(); ok {
		if err := serp.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "SERP.url": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "SERP.title"`)}
	}
	if v, ok := sc.mutation.Title(); ok {
		if err := serp.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "SERP.title": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "SERP.description"`)}
	}
	if _, ok := sc.mutation.KeyWords(); !ok {
		return &ValidationError{Name: "key_words", err: errors.New(`ent: missing required field "SERP.key_words"`)}
	}
	if _, ok := sc.mutation.IsRead(); !ok {
		return &ValidationError{Name: "is_read", err: errors.New(`ent: missing required field "SERP.is_read"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SERP.created_at"`)}
	}
	return nil
}

func (sc *SERPCreate) sqlSave(ctx context.Context) (*SERP, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SERPCreate) createSpec() (*SERP, *sqlgraph.CreateSpec) {
	var (
		_node = &SERP{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(serp.Table, sqlgraph.NewFieldSpec(serp.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.URL(); ok {
		_spec.SetField(serp.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(serp.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(serp.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.Phones(); ok {
		_spec.SetField(serp.FieldPhones, field.TypeJSON, value)
		_node.Phones = value
	}
	if value, ok := sc.mutation.Emails(); ok {
		_spec.SetField(serp.FieldEmails, field.TypeJSON, value)
		_node.Emails = value
	}
	if value, ok := sc.mutation.KeyWords(); ok {
		_spec.SetField(serp.FieldKeyWords, field.TypeJSON, value)
		_node.KeyWords = value
	}
	if value, ok := sc.mutation.IsRead(); ok {
		_spec.SetField(serp.FieldIsRead, field.TypeBool, value)
		_node.IsRead = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(serp.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sc.mutation.SearchQueryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serp.SearchQueryTable,
			Columns: []string{serp.SearchQueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(searchquery.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SqID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SERP.Create().
//		SetURL(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SERPUpsert) {
//			SetURL(v+v).
//		}).
//		Exec(ctx)
func (sc *SERPCreate) OnConflict(opts ...sql.ConflictOption) *SERPUpsertOne {
	sc.conflict = opts
	return &SERPUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SERP.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SERPCreate) OnConflictColumns(columns ...string) *SERPUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SERPUpsertOne{
		create: sc,
	}
}

type (
	// SERPUpsertOne is the builder for "upsert"-ing
	//  one SERP node.
	SERPUpsertOne struct {
		create *SERPCreate
	}

	// SERPUpsert is the "OnConflict" setter.
	SERPUpsert struct {
		*sql.UpdateSet
	}
)

// SetURL sets the "url" field.
func (u *SERPUpsert) SetURL(v string) *SERPUpsert {
	u.Set(serp.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SERPUpsert) UpdateURL() *SERPUpsert {
	u.SetExcluded(serp.FieldURL)
	return u
}

// SetTitle sets the "title" field.
func (u *SERPUpsert) SetTitle(v string) *SERPUpsert {
	u.Set(serp.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SERPUpsert) UpdateTitle() *SERPUpsert {
	u.SetExcluded(serp.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *SERPUpsert) SetDescription(v string) *SERPUpsert {
	u.Set(serp.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SERPUpsert) UpdateDescription() *SERPUpsert {
	u.SetExcluded(serp.FieldDescription)
	return u
}

// SetPhones sets the "phones" field.
func (u *SERPUpsert) SetPhones(v []string) *SERPUpsert {
	u.Set(serp.FieldPhones, v)
	return u
}

// UpdatePhones sets the "phones" field to the value that was provided on create.
func (u *SERPUpsert) UpdatePhones() *SERPUpsert {
	u.SetExcluded(serp.FieldPhones)
	return u
}

// ClearPhones clears the value of the "phones" field.
func (u *SERPUpsert) ClearPhones() *SERPUpsert {
	u.SetNull(serp.FieldPhones)
	return u
}

// SetEmails sets the "emails" field.
func (u *SERPUpsert) SetEmails(v []string) *SERPUpsert {
	u.Set(serp.FieldEmails, v)
	return u
}

// UpdateEmails sets the "emails" field to the value that was provided on create.
func (u *SERPUpsert) UpdateEmails() *SERPUpsert {
	u.SetExcluded(serp.FieldEmails)
	return u
}

// ClearEmails clears the value of the "emails" field.
func (u *SERPUpsert) ClearEmails() *SERPUpsert {
	u.SetNull(serp.FieldEmails)
	return u
}

// SetKeyWords sets the "key_words" field.
func (u *SERPUpsert) SetKeyWords(v []string) *SERPUpsert {
	u.Set(serp.FieldKeyWords, v)
	return u
}

// UpdateKeyWords sets the "key_words" field to the value that was provided on create.
func (u *SERPUpsert) UpdateKeyWords() *SERPUpsert {
	u.SetExcluded(serp.FieldKeyWords)
	return u
}

// SetIsRead sets the "is_read" field.
func (u *SERPUpsert) SetIsRead(v bool) *SERPUpsert {
	u.Set(serp.FieldIsRead, v)
	return u
}

// UpdateIsRead sets the "is_read" field to the value that was provided on create.
func (u *SERPUpsert) UpdateIsRead() *SERPUpsert {
	u.SetExcluded(serp.FieldIsRead)
	return u
}

// SetSqID sets the "sq_id" field.
func (u *SERPUpsert) SetSqID(v int) *SERPUpsert {
	u.Set(serp.FieldSqID, v)
	return u
}

// UpdateSqID sets the "sq_id" field to the value that was provided on create.
func (u *SERPUpsert) UpdateSqID() *SERPUpsert {
	u.SetExcluded(serp.FieldSqID)
	return u
}

// ClearSqID clears the value of the "sq_id" field.
func (u *SERPUpsert) ClearSqID() *SERPUpsert {
	u.SetNull(serp.FieldSqID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SERPUpsert) SetCreatedAt(v time.Time) *SERPUpsert {
	u.Set(serp.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SERPUpsert) UpdateCreatedAt() *SERPUpsert {
	u.SetExcluded(serp.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SERP.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SERPUpsertOne) UpdateNewValues() *SERPUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SERP.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SERPUpsertOne) Ignore() *SERPUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SERPUpsertOne) DoNothing() *SERPUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SERPCreate.OnConflict
// documentation for more info.
func (u *SERPUpsertOne) Update(set func(*SERPUpsert)) *SERPUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SERPUpsert{UpdateSet: update})
	}))
	return u
}

// SetURL sets the "url" field.
func (u *SERPUpsertOne) SetURL(v string) *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SERPUpsertOne) UpdateURL() *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateURL()
	})
}

// SetTitle sets the "title" field.
func (u *SERPUpsertOne) SetTitle(v string) *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SERPUpsertOne) UpdateTitle() *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *SERPUpsertOne) SetDescription(v string) *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SERPUpsertOne) UpdateDescription() *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateDescription()
	})
}

// SetPhones sets the "phones" field.
func (u *SERPUpsertOne) SetPhones(v []string) *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.SetPhones(v)
	})
}

// UpdatePhones sets the "phones" field to the value that was provided on create.
func (u *SERPUpsertOne) UpdatePhones() *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.UpdatePhones()
	})
}

// ClearPhones clears the value of the "phones" field.
func (u *SERPUpsertOne) ClearPhones() *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.ClearPhones()
	})
}

// SetEmails sets the "emails" field.
func (u *SERPUpsertOne) SetEmails(v []string) *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.SetEmails(v)
	})
}

// UpdateEmails sets the "emails" field to the value that was provided on create.
func (u *SERPUpsertOne) UpdateEmails() *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateEmails()
	})
}

// ClearEmails clears the value of the "emails" field.
func (u *SERPUpsertOne) ClearEmails() *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.ClearEmails()
	})
}

// SetKeyWords sets the "key_words" field.
func (u *SERPUpsertOne) SetKeyWords(v []string) *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.SetKeyWords(v)
	})
}

// UpdateKeyWords sets the "key_words" field to the value that was provided on create.
func (u *SERPUpsertOne) UpdateKeyWords() *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateKeyWords()
	})
}

// SetIsRead sets the "is_read" field.
func (u *SERPUpsertOne) SetIsRead(v bool) *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.SetIsRead(v)
	})
}

// UpdateIsRead sets the "is_read" field to the value that was provided on create.
func (u *SERPUpsertOne) UpdateIsRead() *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateIsRead()
	})
}

// SetSqID sets the "sq_id" field.
func (u *SERPUpsertOne) SetSqID(v int) *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.SetSqID(v)
	})
}

// UpdateSqID sets the "sq_id" field to the value that was provided on create.
func (u *SERPUpsertOne) UpdateSqID() *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateSqID()
	})
}

// ClearSqID clears the value of the "sq_id" field.
func (u *SERPUpsertOne) ClearSqID() *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.ClearSqID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SERPUpsertOne) SetCreatedAt(v time.Time) *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SERPUpsertOne) UpdateCreatedAt() *SERPUpsertOne {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SERPUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SERPCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SERPUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SERPUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SERPUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SERPCreateBulk is the builder for creating many SERP entities in bulk.
type SERPCreateBulk struct {
	config
	err      error
	builders []*SERPCreate
	conflict []sql.ConflictOption
}

// Save creates the SERP entities in the database.
func (scb *SERPCreateBulk) Save(ctx context.Context) ([]*SERP, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*SERP, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SERPMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SERPCreateBulk) SaveX(ctx context.Context) []*SERP {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SERPCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SERPCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SERP.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SERPUpsert) {
//			SetURL(v+v).
//		}).
//		Exec(ctx)
func (scb *SERPCreateBulk) OnConflict(opts ...sql.ConflictOption) *SERPUpsertBulk {
	scb.conflict = opts
	return &SERPUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SERP.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SERPCreateBulk) OnConflictColumns(columns ...string) *SERPUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SERPUpsertBulk{
		create: scb,
	}
}

// SERPUpsertBulk is the builder for "upsert"-ing
// a bulk of SERP nodes.
type SERPUpsertBulk struct {
	create *SERPCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SERP.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SERPUpsertBulk) UpdateNewValues() *SERPUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SERP.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SERPUpsertBulk) Ignore() *SERPUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SERPUpsertBulk) DoNothing() *SERPUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SERPCreateBulk.OnConflict
// documentation for more info.
func (u *SERPUpsertBulk) Update(set func(*SERPUpsert)) *SERPUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SERPUpsert{UpdateSet: update})
	}))
	return u
}

// SetURL sets the "url" field.
func (u *SERPUpsertBulk) SetURL(v string) *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *SERPUpsertBulk) UpdateURL() *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateURL()
	})
}

// SetTitle sets the "title" field.
func (u *SERPUpsertBulk) SetTitle(v string) *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *SERPUpsertBulk) UpdateTitle() *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *SERPUpsertBulk) SetDescription(v string) *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *SERPUpsertBulk) UpdateDescription() *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateDescription()
	})
}

// SetPhones sets the "phones" field.
func (u *SERPUpsertBulk) SetPhones(v []string) *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.SetPhones(v)
	})
}

// UpdatePhones sets the "phones" field to the value that was provided on create.
func (u *SERPUpsertBulk) UpdatePhones() *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.UpdatePhones()
	})
}

// ClearPhones clears the value of the "phones" field.
func (u *SERPUpsertBulk) ClearPhones() *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.ClearPhones()
	})
}

// SetEmails sets the "emails" field.
func (u *SERPUpsertBulk) SetEmails(v []string) *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.SetEmails(v)
	})
}

// UpdateEmails sets the "emails" field to the value that was provided on create.
func (u *SERPUpsertBulk) UpdateEmails() *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateEmails()
	})
}

// ClearEmails clears the value of the "emails" field.
func (u *SERPUpsertBulk) ClearEmails() *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.ClearEmails()
	})
}

// SetKeyWords sets the "key_words" field.
func (u *SERPUpsertBulk) SetKeyWords(v []string) *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.SetKeyWords(v)
	})
}

// UpdateKeyWords sets the "key_words" field to the value that was provided on create.
func (u *SERPUpsertBulk) UpdateKeyWords() *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateKeyWords()
	})
}

// SetIsRead sets the "is_read" field.
func (u *SERPUpsertBulk) SetIsRead(v bool) *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.SetIsRead(v)
	})
}

// UpdateIsRead sets the "is_read" field to the value that was provided on create.
func (u *SERPUpsertBulk) UpdateIsRead() *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateIsRead()
	})
}

// SetSqID sets the "sq_id" field.
func (u *SERPUpsertBulk) SetSqID(v int) *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.SetSqID(v)
	})
}

// UpdateSqID sets the "sq_id" field to the value that was provided on create.
func (u *SERPUpsertBulk) UpdateSqID() *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateSqID()
	})
}

// ClearSqID clears the value of the "sq_id" field.
func (u *SERPUpsertBulk) ClearSqID() *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.ClearSqID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SERPUpsertBulk) SetCreatedAt(v time.Time) *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SERPUpsertBulk) UpdateCreatedAt() *SERPUpsertBulk {
	return u.Update(func(s *SERPUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SERPUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SERPCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SERPCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SERPUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
