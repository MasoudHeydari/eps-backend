// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/karust/openserp/ent/searchquery"
	"github.com/karust/openserp/ent/serp"
)

// SearchQueryCreate is the builder for creating a SearchQuery entity.
type SearchQueryCreate struct {
	config
	mutation *SearchQueryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetQuery sets the "query" field.
func (sqc *SearchQueryCreate) SetQuery(s string) *SearchQueryCreate {
	sqc.mutation.SetQuery(s)
	return sqc
}

// SetLocation sets the "location" field.
func (sqc *SearchQueryCreate) SetLocation(s string) *SearchQueryCreate {
	sqc.mutation.SetLocation(s)
	return sqc
}

// SetLanguage sets the "language" field.
func (sqc *SearchQueryCreate) SetLanguage(s string) *SearchQueryCreate {
	sqc.mutation.SetLanguage(s)
	return sqc
}

// SetIsCanceled sets the "is_canceled" field.
func (sqc *SearchQueryCreate) SetIsCanceled(b bool) *SearchQueryCreate {
	sqc.mutation.SetIsCanceled(b)
	return sqc
}

// SetNillableIsCanceled sets the "is_canceled" field if the given value is not nil.
func (sqc *SearchQueryCreate) SetNillableIsCanceled(b *bool) *SearchQueryCreate {
	if b != nil {
		sqc.SetIsCanceled(*b)
	}
	return sqc
}

// SetCreatedAt sets the "created_at" field.
func (sqc *SearchQueryCreate) SetCreatedAt(t time.Time) *SearchQueryCreate {
	sqc.mutation.SetCreatedAt(t)
	return sqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sqc *SearchQueryCreate) SetNillableCreatedAt(t *time.Time) *SearchQueryCreate {
	if t != nil {
		sqc.SetCreatedAt(*t)
	}
	return sqc
}

// AddSerpIDs adds the "serps" edge to the SERP entity by IDs.
func (sqc *SearchQueryCreate) AddSerpIDs(ids ...int) *SearchQueryCreate {
	sqc.mutation.AddSerpIDs(ids...)
	return sqc
}

// AddSerps adds the "serps" edges to the SERP entity.
func (sqc *SearchQueryCreate) AddSerps(s ...*SERP) *SearchQueryCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sqc.AddSerpIDs(ids...)
}

// Mutation returns the SearchQueryMutation object of the builder.
func (sqc *SearchQueryCreate) Mutation() *SearchQueryMutation {
	return sqc.mutation
}

// Save creates the SearchQuery in the database.
func (sqc *SearchQueryCreate) Save(ctx context.Context) (*SearchQuery, error) {
	sqc.defaults()
	return withHooks(ctx, sqc.sqlSave, sqc.mutation, sqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sqc *SearchQueryCreate) SaveX(ctx context.Context) *SearchQuery {
	v, err := sqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sqc *SearchQueryCreate) Exec(ctx context.Context) error {
	_, err := sqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqc *SearchQueryCreate) ExecX(ctx context.Context) {
	if err := sqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sqc *SearchQueryCreate) defaults() {
	if _, ok := sqc.mutation.IsCanceled(); !ok {
		v := searchquery.DefaultIsCanceled
		sqc.mutation.SetIsCanceled(v)
	}
	if _, ok := sqc.mutation.CreatedAt(); !ok {
		v := searchquery.DefaultCreatedAt()
		sqc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sqc *SearchQueryCreate) check() error {
	if _, ok := sqc.mutation.Query(); !ok {
		return &ValidationError{Name: "query", err: errors.New(`ent: missing required field "SearchQuery.query"`)}
	}
	if v, ok := sqc.mutation.Query(); ok {
		if err := searchquery.QueryValidator(v); err != nil {
			return &ValidationError{Name: "query", err: fmt.Errorf(`ent: validator failed for field "SearchQuery.query": %w`, err)}
		}
	}
	if _, ok := sqc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "SearchQuery.location"`)}
	}
	if _, ok := sqc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "SearchQuery.language"`)}
	}
	if _, ok := sqc.mutation.IsCanceled(); !ok {
		return &ValidationError{Name: "is_canceled", err: errors.New(`ent: missing required field "SearchQuery.is_canceled"`)}
	}
	if _, ok := sqc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SearchQuery.created_at"`)}
	}
	return nil
}

func (sqc *SearchQueryCreate) sqlSave(ctx context.Context) (*SearchQuery, error) {
	if err := sqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sqc.mutation.id = &_node.ID
	sqc.mutation.done = true
	return _node, nil
}

func (sqc *SearchQueryCreate) createSpec() (*SearchQuery, *sqlgraph.CreateSpec) {
	var (
		_node = &SearchQuery{config: sqc.config}
		_spec = sqlgraph.NewCreateSpec(searchquery.Table, sqlgraph.NewFieldSpec(searchquery.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sqc.conflict
	if value, ok := sqc.mutation.Query(); ok {
		_spec.SetField(searchquery.FieldQuery, field.TypeString, value)
		_node.Query = value
	}
	if value, ok := sqc.mutation.Location(); ok {
		_spec.SetField(searchquery.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := sqc.mutation.Language(); ok {
		_spec.SetField(searchquery.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := sqc.mutation.IsCanceled(); ok {
		_spec.SetField(searchquery.FieldIsCanceled, field.TypeBool, value)
		_node.IsCanceled = value
	}
	if value, ok := sqc.mutation.CreatedAt(); ok {
		_spec.SetField(searchquery.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sqc.mutation.SerpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   searchquery.SerpsTable,
			Columns: []string{searchquery.SerpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SearchQuery.Create().
//		SetQuery(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SearchQueryUpsert) {
//			SetQuery(v+v).
//		}).
//		Exec(ctx)
func (sqc *SearchQueryCreate) OnConflict(opts ...sql.ConflictOption) *SearchQueryUpsertOne {
	sqc.conflict = opts
	return &SearchQueryUpsertOne{
		create: sqc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SearchQuery.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sqc *SearchQueryCreate) OnConflictColumns(columns ...string) *SearchQueryUpsertOne {
	sqc.conflict = append(sqc.conflict, sql.ConflictColumns(columns...))
	return &SearchQueryUpsertOne{
		create: sqc,
	}
}

type (
	// SearchQueryUpsertOne is the builder for "upsert"-ing
	//  one SearchQuery node.
	SearchQueryUpsertOne struct {
		create *SearchQueryCreate
	}

	// SearchQueryUpsert is the "OnConflict" setter.
	SearchQueryUpsert struct {
		*sql.UpdateSet
	}
)

// SetQuery sets the "query" field.
func (u *SearchQueryUpsert) SetQuery(v string) *SearchQueryUpsert {
	u.Set(searchquery.FieldQuery, v)
	return u
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *SearchQueryUpsert) UpdateQuery() *SearchQueryUpsert {
	u.SetExcluded(searchquery.FieldQuery)
	return u
}

// SetLocation sets the "location" field.
func (u *SearchQueryUpsert) SetLocation(v string) *SearchQueryUpsert {
	u.Set(searchquery.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *SearchQueryUpsert) UpdateLocation() *SearchQueryUpsert {
	u.SetExcluded(searchquery.FieldLocation)
	return u
}

// SetLanguage sets the "language" field.
func (u *SearchQueryUpsert) SetLanguage(v string) *SearchQueryUpsert {
	u.Set(searchquery.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *SearchQueryUpsert) UpdateLanguage() *SearchQueryUpsert {
	u.SetExcluded(searchquery.FieldLanguage)
	return u
}

// SetIsCanceled sets the "is_canceled" field.
func (u *SearchQueryUpsert) SetIsCanceled(v bool) *SearchQueryUpsert {
	u.Set(searchquery.FieldIsCanceled, v)
	return u
}

// UpdateIsCanceled sets the "is_canceled" field to the value that was provided on create.
func (u *SearchQueryUpsert) UpdateIsCanceled() *SearchQueryUpsert {
	u.SetExcluded(searchquery.FieldIsCanceled)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SearchQueryUpsert) SetCreatedAt(v time.Time) *SearchQueryUpsert {
	u.Set(searchquery.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SearchQueryUpsert) UpdateCreatedAt() *SearchQueryUpsert {
	u.SetExcluded(searchquery.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SearchQuery.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SearchQueryUpsertOne) UpdateNewValues() *SearchQueryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SearchQuery.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SearchQueryUpsertOne) Ignore() *SearchQueryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SearchQueryUpsertOne) DoNothing() *SearchQueryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SearchQueryCreate.OnConflict
// documentation for more info.
func (u *SearchQueryUpsertOne) Update(set func(*SearchQueryUpsert)) *SearchQueryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SearchQueryUpsert{UpdateSet: update})
	}))
	return u
}

// SetQuery sets the "query" field.
func (u *SearchQueryUpsertOne) SetQuery(v string) *SearchQueryUpsertOne {
	return u.Update(func(s *SearchQueryUpsert) {
		s.SetQuery(v)
	})
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *SearchQueryUpsertOne) UpdateQuery() *SearchQueryUpsertOne {
	return u.Update(func(s *SearchQueryUpsert) {
		s.UpdateQuery()
	})
}

// SetLocation sets the "location" field.
func (u *SearchQueryUpsertOne) SetLocation(v string) *SearchQueryUpsertOne {
	return u.Update(func(s *SearchQueryUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *SearchQueryUpsertOne) UpdateLocation() *SearchQueryUpsertOne {
	return u.Update(func(s *SearchQueryUpsert) {
		s.UpdateLocation()
	})
}

// SetLanguage sets the "language" field.
func (u *SearchQueryUpsertOne) SetLanguage(v string) *SearchQueryUpsertOne {
	return u.Update(func(s *SearchQueryUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *SearchQueryUpsertOne) UpdateLanguage() *SearchQueryUpsertOne {
	return u.Update(func(s *SearchQueryUpsert) {
		s.UpdateLanguage()
	})
}

// SetIsCanceled sets the "is_canceled" field.
func (u *SearchQueryUpsertOne) SetIsCanceled(v bool) *SearchQueryUpsertOne {
	return u.Update(func(s *SearchQueryUpsert) {
		s.SetIsCanceled(v)
	})
}

// UpdateIsCanceled sets the "is_canceled" field to the value that was provided on create.
func (u *SearchQueryUpsertOne) UpdateIsCanceled() *SearchQueryUpsertOne {
	return u.Update(func(s *SearchQueryUpsert) {
		s.UpdateIsCanceled()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SearchQueryUpsertOne) SetCreatedAt(v time.Time) *SearchQueryUpsertOne {
	return u.Update(func(s *SearchQueryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SearchQueryUpsertOne) UpdateCreatedAt() *SearchQueryUpsertOne {
	return u.Update(func(s *SearchQueryUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SearchQueryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SearchQueryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SearchQueryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SearchQueryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SearchQueryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SearchQueryCreateBulk is the builder for creating many SearchQuery entities in bulk.
type SearchQueryCreateBulk struct {
	config
	err      error
	builders []*SearchQueryCreate
	conflict []sql.ConflictOption
}

// Save creates the SearchQuery entities in the database.
func (sqcb *SearchQueryCreateBulk) Save(ctx context.Context) ([]*SearchQuery, error) {
	if sqcb.err != nil {
		return nil, sqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sqcb.builders))
	nodes := make([]*SearchQuery, len(sqcb.builders))
	mutators := make([]Mutator, len(sqcb.builders))
	for i := range sqcb.builders {
		func(i int, root context.Context) {
			builder := sqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SearchQueryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sqcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sqcb *SearchQueryCreateBulk) SaveX(ctx context.Context) []*SearchQuery {
	v, err := sqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sqcb *SearchQueryCreateBulk) Exec(ctx context.Context) error {
	_, err := sqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqcb *SearchQueryCreateBulk) ExecX(ctx context.Context) {
	if err := sqcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SearchQuery.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SearchQueryUpsert) {
//			SetQuery(v+v).
//		}).
//		Exec(ctx)
func (sqcb *SearchQueryCreateBulk) OnConflict(opts ...sql.ConflictOption) *SearchQueryUpsertBulk {
	sqcb.conflict = opts
	return &SearchQueryUpsertBulk{
		create: sqcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SearchQuery.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sqcb *SearchQueryCreateBulk) OnConflictColumns(columns ...string) *SearchQueryUpsertBulk {
	sqcb.conflict = append(sqcb.conflict, sql.ConflictColumns(columns...))
	return &SearchQueryUpsertBulk{
		create: sqcb,
	}
}

// SearchQueryUpsertBulk is the builder for "upsert"-ing
// a bulk of SearchQuery nodes.
type SearchQueryUpsertBulk struct {
	create *SearchQueryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SearchQuery.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SearchQueryUpsertBulk) UpdateNewValues() *SearchQueryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SearchQuery.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SearchQueryUpsertBulk) Ignore() *SearchQueryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SearchQueryUpsertBulk) DoNothing() *SearchQueryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SearchQueryCreateBulk.OnConflict
// documentation for more info.
func (u *SearchQueryUpsertBulk) Update(set func(*SearchQueryUpsert)) *SearchQueryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SearchQueryUpsert{UpdateSet: update})
	}))
	return u
}

// SetQuery sets the "query" field.
func (u *SearchQueryUpsertBulk) SetQuery(v string) *SearchQueryUpsertBulk {
	return u.Update(func(s *SearchQueryUpsert) {
		s.SetQuery(v)
	})
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *SearchQueryUpsertBulk) UpdateQuery() *SearchQueryUpsertBulk {
	return u.Update(func(s *SearchQueryUpsert) {
		s.UpdateQuery()
	})
}

// SetLocation sets the "location" field.
func (u *SearchQueryUpsertBulk) SetLocation(v string) *SearchQueryUpsertBulk {
	return u.Update(func(s *SearchQueryUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *SearchQueryUpsertBulk) UpdateLocation() *SearchQueryUpsertBulk {
	return u.Update(func(s *SearchQueryUpsert) {
		s.UpdateLocation()
	})
}

// SetLanguage sets the "language" field.
func (u *SearchQueryUpsertBulk) SetLanguage(v string) *SearchQueryUpsertBulk {
	return u.Update(func(s *SearchQueryUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *SearchQueryUpsertBulk) UpdateLanguage() *SearchQueryUpsertBulk {
	return u.Update(func(s *SearchQueryUpsert) {
		s.UpdateLanguage()
	})
}

// SetIsCanceled sets the "is_canceled" field.
func (u *SearchQueryUpsertBulk) SetIsCanceled(v bool) *SearchQueryUpsertBulk {
	return u.Update(func(s *SearchQueryUpsert) {
		s.SetIsCanceled(v)
	})
}

// UpdateIsCanceled sets the "is_canceled" field to the value that was provided on create.
func (u *SearchQueryUpsertBulk) UpdateIsCanceled() *SearchQueryUpsertBulk {
	return u.Update(func(s *SearchQueryUpsert) {
		s.UpdateIsCanceled()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SearchQueryUpsertBulk) SetCreatedAt(v time.Time) *SearchQueryUpsertBulk {
	return u.Update(func(s *SearchQueryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SearchQueryUpsertBulk) UpdateCreatedAt() *SearchQueryUpsertBulk {
	return u.Update(func(s *SearchQueryUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *SearchQueryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SearchQueryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SearchQueryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SearchQueryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
